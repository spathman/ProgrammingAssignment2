## Calculate the mean of column of data frame or matrix
columnMean <- funxtion(x) {
nColumns <- ncol(x)
means <- numeric(nColumns)
for(i in 1:nColumns) {
means[i] <- mean(x[,i])
}
means
}
## Calculate the mean of column of data frame or matrix
columnMean <- function(x) {
nColumns <- ncol(x)
means <- numeric(nColumns)
for(i in 1:nColumns) {
means[i] <- mean(x[,i])
}
means
}
columnMean(airquality)
## Calculate the mean of column of data frame or matrix
columnMean <- function(x, removeNA = TRUE) {
nColumns <- ncol(x)
means <- numeric(nColumns)
for(i in 1:nColumns) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnMean(airquality, FALSE)
columnMean(airquality)
example(data.table)
library(data.table)
example(data.table)
example(c)
c(list(A = c(B = 1, C = 2), B = c(E = 7)))
x <- c(list(A = c(B = 1, C = 2), B = c(E = 7)))
x
y <- c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = T)
y
x$A
y$A
y$A.B
y[A.B]
y[A]
names(y)
y["A"]
y["A.B"]
library("jsonlite")
jsonData <- fromJson("https://api.github.com/users/spathman/repos")
jsonData <- fromJSON("https://api.github.com/users/spathman/repos")
jsonData
names(jsonData)
jsonData["owner"]
install.packages("RMySQL")
dbCon <- dbConnect(MySQL(), user="pat", password="simemily1", host="localhost")
library("RMySQL")
dbCon <- dbConnect(MySQL(), user="pat", password="simemily1", host="localhost")
dbCon <- dbConnect(MySQL(), user="pat", password="simemily", host="localhost")
dbCon <- dbConnect(MySQL(), user="pat", password="purple", host="localhost")
result <- dbGetQuery(dbCon,"show databases;"); dbDisconnect(ucscDb);
result <- dbGetQuery(dbCon,"show databases;"); dbDisconnect(dbCon);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
example(=)
example(<-)
example(list)
head(cars, 5)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "76fb34d7a02bb66aef12")
myapp <- oauth_app("github", "76fb34d7a02bb66aef12", "f60a3cee0c32029c33a681e9c18c5cc8ecc917cb")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
oauth_endpoints("github")
myapp <- oauth_app("github", "76fb34d7a02bb66aef12", "f60a3cee0c32029c33a681e9c18c5cc8ecc917cb")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
names(req)
names(url)
names(content)
req["url"]
myjson <- toJSON(req, pretty=TRUE)
library(jsonlite)
myjson <- toJSON(req, pretty=TRUE)
dim(req)
req
req$name
req["name"]
req[name]
df <- as.data.frame(req)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData$name)
names(jsonData)
names(jsonData$name)
names(jsonData$owner)
df <- fromJSON(jsonData)
jsonData
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
head(acs,5)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(RMySQL)
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("sqldf")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
data <- read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read.table
detach(package:RMySQL)
sqldf("select pwgtp1 from acs where AGEP < 50")
ff <- tempfile()
cat(file = ff, "123456", "987654", sep = "\n")
df <- read.fwf(ff, widths = c(1,2,3))    #> 1 23 456 \ 9 87 654
df
a <- c("16JUL2014",     "23.1 1.5",     "26.2 0.6",     "27.4 0.2",     "29.1 0.4")
a
l <- c(length(a[1], length(a[2]))
)
a[1]
a[2]
lengeth(a[1])
length(a[1])
count(a[1])
size(a[1])
dim(a[1])
width(a[1])
?nchar
nchar(a[1])
l <- c(nchar(a[1]), nchar(a[2]), nchar(a[3]), nchar(a[4]), nchar(a[5]))
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df <- read.fwf(ff, l)    #> 1 23 456 \ 9 87 654
df
l
df <- read.fwf(ff, l, header = TRUE, sep = " ")    #> 1 23 456 \ 9 87 654
df <- read.fwf(ff, l, skip = 2)
df
l <- c(nchar(a[1]), nchar(a[2]), nchar(a[3]), nchar(a[4]), nchar(a[5]))
w <- c(9,4,3,4,3,4,3,4,3)
df <- read.fwf(file, w, skip = 2)
df
w <- c(10,4,3,4,3,4,3,4,3)
df <- read.fwf(file, w, skip = 2)
df
View(my_matrix)
line <- "03JAN1990     23.4-0.4     25.1-0.3     26.6 0.0     28.6 0.3"
nchar(line)
c1 <- "03JAN1990"
c2 <- "03JAN1990     23.4"
nchar(c2) - nchar(c1)
w <- c(9,9,1,3,9,1,3,9,1,3,9,1,3)
df <- read.fwf(file, w, skip = 2)
df
head(df,5)
df <- read.fwf(file, w, skip = 4)
head(df, 2)
w
w <- c(10, 9, 1, 3, 9, 1, 3, 9, 1, 3, 9, 1, 3)
df <- read.fwf(file, w, skip = 4)
head(df, 2)
DF <- data.frame(
x=1:10,
y=10:1,
z=rep(5,10),
a=11:20
)
DF
keeps <- "y"
DF[,keeps,drop=FALSE]
keeps <- c("V1", "V2", "V4", "V5", "V7", "V8", "V10", "V11", "V13")
df[keeps]
sum(df[4]) + sum(df[9])
c4 <- df[4]
class(c4)
sum(c4)
c9 <- df[9]
sum(c9)
class(df[9])
unclass(df[9])
head(df, 3)
df1 <- df[keeps]
head(df1,3)
df1[1,1:9]
df1[1,4]
df1[1,9]
sum(df1[1]) + sum(df1[9])
sum(df1[4]) + sum(df1[9])
?readLines
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con,100)
htmlCode[1]
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
swirl()
package("swirl")
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?gather
submit()
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
submit()
extract_numeric("class5")
submit()
?mutate
submit()
mtcars
submit()
extract_numeric("class1:class5")
?extract_numeric
c("class1:class5")
c(class1:class5)
submit()
gather(class, grade, class1:class5, na.rm = TRUE)
gather(student3, class, grade, class1:class5, na.rm = TRUE)
gather(students3, class, grade, class1:class5, na.rm = TRUE)
x <- gather(students3, class, grade, class1:class5, na.rm = TRUE)
y<- spread(x, test, grade)
y
z <- mutate(y, class, class = extract_numeric("class1", "class2", "class3", "class4", "class5"))
z <- mutate(y, class, class = extract_numeric(c("class1", "class2", "class3", "class4", "class5")))
y
?mutate
airquality
mutate(airquality, Ozone = -Ozone)
mutate(airquality, new = -Ozone, Temp = (Temp - 32) / 1.8)
mutate( class = extract_numeric("class1", "class2", "class3", "class4", "class5"))
mutate(y, class = extract_numeric("class1", "class2", "class3", "class4", "class5"))
mutate(y, class = extract_numeric(c("class1", "class2", "class3", "class4", "class5")))
mutate(y, class = extract_numeric("class5"))
mutate(y, class = extract_numeric("class5"), class = extract_numeric("class4"))
mutate(y, class = extract_numeric(class))
submit
submit()
students4
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
?separate
df <- data.frame(x = c("a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
submit()
Sys.getlocale("LC_TIME")
library
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
mu_date <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mmd("March 12, 1975")
mdy"March 12, 1975")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
dmy(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hm(now()))
this_moment <- update(this_moment, hours = 10, minutes 16, seconds =0)
this_moment <- update(this_moment, hours = 10, minutes =16, seconds =0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("~/Development/cousera-androidappdev-2015/data_science/R_programming/week2/assignment1")
library(testthat)
?testthat
a <- 9
expect_that(a, is_less_than(10))
expect_less_than(a, 10)
expect_equal(a,9)
example(test_that)
test_that("trigonometric functions match identities", {
expect_that(sin(pi / 4), equals(1))
})
test_that("trigonometric functions match identities", {
expect_that(sin(pi / 4), equals(1.414))
})
test_that("trigonometric functions match identities", {
expect_that(sin(pi / 4), equals(0.707))
})
test_that("trigonometric functions match identities", {
expect_that(sin(pi / 4), equals(0.7071510342))
})
source("pollutantmean.R")
source("test-complete-df.r")
source("test-complete.r")
source("test-pollutantmean.r")
test_file("test-pollutantmean.r")
test_file("test-complete-df.r")
test_file("test-complete.r")
setwd("~/Development/cousera-androidappdev-2015/data_science/R_programming/assignment2/assignment_tutorial/PA2-clarifying_instructions-master")
setwd("~/Development/cousera-androidappdev-2015/data_science/R_programming/week3/assignment/ProgrammingAssignment2")
a <- makeVector(c(5,1,3))
source("cashemean.R")
a <- makeVector(c(5,1,3))
a$get()
a$set(c(7,4,1,2))
a$get()
a$getmean()
a$setmean()
a$setmean(a)
a$getmean()
a$setmean(10)
a$getmean()
a <- makeVector(c(1,2,3,4))
cachemean (a)
a$setmean()
a$setmean(NULL)
a$setmean()
a$getmean()
a <- makeVector(c(1,2,3,4))
cachemean (a)
a$getmean()
b <- makeVector(c(1,2,3,4))
b$getmean()
cachemean(a)
b$getmean()
cachemean(b)
b$getmean()
a <- makeVector(c(1,2,3,4))
a$getmean()
a <- makeVector(c(1,2,3,4))
x
y
get
y
x
class(x)
get()
get(x)
get(x[1])
a <- c(1,2,3,4,5)
get(a)
a <- makeVector(c(1,2,3,4,5))
get(a)
a$get()
a
a$x
a$m
a$getmean()
cachemean(a$get())
cachemean()
a$setmean()
cachemean(a)
a$get()
class(a)
a[1]
a$m
a[1]
a$x
a$set(c(4,5,6))
a$x
a$get()
a$getmean()
cachemean(a)
b <- makeVector(c(1,2,3,4,5))
b$getmean()
b$get()
cachemean(b)
a$setmean(20)
a$getmean()
a[3]
dim)a
dim(a)
length(a)
a[1]
a[2]
a[3]
a[4]
c <- makeVector()
c$get
c$set(c(1,2,3))
c$get
c$get()
c$set(c())
c$get()
?matrix
mdat <- matrix(c(1,2,3, 11,12,13))
class(mdat)
mdat
mdat <- matrix(c(1,2,3), c(11,12,13))
mdat <- matrix(c(1,2,3), c(11,12,13), c(20, 30, 40))
data <- as.matrix(1:10)
data
data <- matrix(1:9, nrow = 3, ncol = 3)
data
data <- matrix(1:9, nrow = 3, ncol = 3, byrow = T)
data
matrix(1:4, nc = 2)
source("cachematrix.R")
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
m$get()
x <- makeCacheMatrix(m)
source("cachematrix.R")
x <- makeCacheMatrix(m)
source("cachematrix.R")
x <- makeCacheMatrix(m)
x$get
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
m1 <- matrix(1:9, nc = 3)
y <- makeCacheMatrix(m1)
y$getinverse()
cacheSolve(y)
y
y$get()
solve(y$get())
?matrix
?solve
det(m1)
m2 <- matrix(1:6, nc = 2)
m2
det(m2)
nrow(m2) == ncol(m2)
nrow(m1) == ncol(m1)
source("cachematrix.R")
makeCacheMatrix(m2)
x <- makeCacheMatrix(m2)
x
x$get()
cacheSolve(x)
m1
x <- makeCacheMatrix(m1)
cacheSolve(x)
x <- makeCacheMatrix(m)
cacheSolve(x)
x$get()
det(x$get())
x$get() * cacheSolve(x)
x$get()
x$get() %*% cacheSolve(x)
